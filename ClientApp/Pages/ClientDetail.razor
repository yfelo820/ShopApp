@page "/clientDetails"
@page "/clientDetails/{id:int}"
@using ClientApp.Models
@inject NavigationManager NavigationManager;
@inject HttpClient http
@using System.Text.Json
@using ClientApp.Services
@using global::Shared.Models
@inject IHttpClientFactory clientFactory
@inject IJSRuntime JSRuntime

<PageTitle> Client Details </PageTitle>

<h3>Client Details</h3>

<EditForm Model="@client">

    <table class="table">
        <tr>
            <td>Name:</td>
            <td><input class="form-control col-sm-4" type="text" @bind="client.Name" /> </td>
        </tr>
        <tr>
            <td>Email:</td>
            <td><input class="form-control col-sm-4" type="text" @bind="client.Email" /> </td>
        </tr>
        <tr>
            <td>PhoneNumber:</td>
            <td><input class="form-control col-sm-4" type="text" @bind="client.PhoneNumber" /> </td>
        </tr>
        <tr>
            <td colspan="2" style="text-align:center">
                <input class="btn btn-primary" style="background-color:#0b5ed7;" type="submit" value="Save" @onclick="AddOrUpdate" />
                <input class="btn btn-secondary" style="background-color:gray;" type="button" value="Cancel" @onclick="Cancel" />
            </td>
        </tr>
    </table>

</EditForm>

@code {

    [Parameter]
    public int id { get; set; }

    private ClientApp.Models.Client client = new ();

    protected override async Task OnInitializedAsync()
    {
        if (id != 0)
        {
            await GetClient();
        }
    }

    private async Task GetClient()
    {
        try
        {
            var jwtLocalStorage = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "JWTUSER");

            if (string.IsNullOrEmpty(jwtLocalStorage))
            {
                var jwtResolver = new JWTResolverServices(clientFactory);
                var tokenString = await jwtResolver.GetToken();

                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "JWTUSER", tokenString);
            }

            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "JWTUSER");

            var clientServices = new ClientRestServices(http);
            var client = await clientServices.GetClientById(token, id);

            this.client = client;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener datos: {ex.Message}");
        }
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("/client");
    }

    protected async Task AddOrUpdate()
    {
        try
        {
            var jwtLocalStorage = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "JWTUSER");

            if (string.IsNullOrEmpty(jwtLocalStorage))
            {
                var jwtResolver = new JWTResolverServices(clientFactory);
                var tokenString = await jwtResolver.GetToken();

                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "JWTUSER", tokenString);
            }

            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "JWTUSER");
            http = new HttpClient();

            var clientServices = new ClientRestServices(http);
            var client = await clientServices.AddOrUpdateClient(token, this.client);

            this.client = client;

            NavigationManager.NavigateTo("/client");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener datos: {ex.Message}");
        }
    }

}
