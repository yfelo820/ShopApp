@page "/viewerSale"

@using ClientApp.Models
@using System.Text.Json
@using ClientApp.Services
@using global::Shared.Models

@inject NavigationManager NavigationManager;
@inject HttpClient http
@inject IHttpClientFactory clientFactory
@inject IJSRuntime JSRuntime

<h3>Sales Viewer</h3>

@if (salesList == null)
{
    <p><em> Loading... </em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th> Client-Name </th>
                <th> Product-Name</th>
                <th> Amount </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sale in salesList)
            {
                <tr>
                    <td> @sale.ClientName </td>
                    <td> @sale.ProductName </td>
                    <td> @sale.Amount </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    List<SalesResponse> salesList;

    protected override async Task OnInitializedAsync()
    {
        await GetSales();
    }

    private async Task GetSales()
    {
        try
        {
            var jwtLocalStorage = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "JWTUSER");

            if (string.IsNullOrEmpty(jwtLocalStorage))
            {
                var jwtResolver = new JWTResolverServices(clientFactory);
                var tokenString = await jwtResolver.GetToken();

                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "JWTUSER", tokenString);
            }

            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "JWTUSER");
            http = new HttpClient();

            var shopServices = new ShopRestServices(http);
            var salesList = await shopServices.GetAllSales(token);

            this.salesList = salesList.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener datos: {ex.Message}");
        }
    }

}
